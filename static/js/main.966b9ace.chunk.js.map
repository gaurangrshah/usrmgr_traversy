{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","delete","t0","_this2","_this$props$contact","name","email","phone","className","onClick","style","cursor","float","color","bind","Link","to","marginRight","Contacts","console","log","Fragment","contacts_Contact","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classNames","is-invalid","defaultProps","AddContact","errors","onSubmit","e","_this$state","newContact","preventDefault","abrupt","uuid","post","history","push","defineProperty","target","_this$state2","layout_TextInputGroup","EditContact","updContact","match","params","put","Header","branding","href","About","NotFound","App","context_Provider","HashRouter","layout_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.966b9ace.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\n\n//reducer is an arrow func. that takes in @params: state, action => updated state w/o mutation.;\nconst reducer = (state, action) => {\n  //eval action.type and preform actions based on type:\n  switch (action.type) {\n    // when the action.type = DELETE_CONTACT\n    case 'DELETE_CONTACT':\n      return {\n        //using spread-op to grab all of our state\n        ...state,\n        //filter thru each contact in the contacts object from state\n        contacts: state.contacts.filter(\n          //if the id of the contact being deleted does not match then return it.\n          contact => contact.id !== action.payload\n        )\n        // payload is the data that is sent along with an action in our case the id.\n        // payload can also contain the entire contact object if necc.\n      };\n    //set case for action.type 'ADD_CONTACT'\n    case 'ADD_CONTACT':\n      return {\n        ...state,\n        //grabbing the action.payload from our contacts array\n        contacts: [action.payload, ...state.contacts]\n        //using spread to add on the new contact from payload to state.\n      };\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        //mapping contacts to check for the correct user id against the id from payload\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id\n            ? //if the payload id matches contact.id we set contact = the entire payload\n              (contact = action.payload)\n            : //else, we just set it back to the same contact object.\n              contact\n        )\n      };\n    default:\n      // set a default case, just in case, as is proper.\n      return state;\n    // if the default case is executed, then just return current state.\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    contacts: [],\n    //NOTE dispatch is a method on our contact{object}\n    dispatch: action =>\n      this.setState(state =>\n        //dispatch returns a function setState which in turn returns a reducer.\n        reducer(state, action)\n      )\n    //the reducer gets passed in our state and an action.\n  };\n  //Using async/await to fulfill request\n  async componentDidMount() {\n    //assigning a variable to handle our response & setting axios to \"await\"\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n    this.setState({ contacts: res.data });\n  }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\nexport const Consumer = Context.Consumer;\n\n// this file provides redux like \"provider\" functionality to manage data as an alternative to passing state. this file gives us a class called provider which we then wrap around our entire application.\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false\n  };\n  // @params: id(int), dispatch(func) passed in from the onClick handler\n  onDeleteClick = async (id, dispatch) => {\n    //hack: mocking delete from persistent database, with try/catch:\n    try {\n      //since we are not expecting any data back we can forego creating a variable to handle our response\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n\n      //call dispatch and pass in the action='DELETE_CONTACT' and payload=id\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    } catch (e) {\n      // Regarless of persistence above, we atleast want to remove, even if there is an error:\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    }\n  };\n\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    // destructuring showContactInfo from state\n    const { showContactInfo } = this.state;\n\n    return (\n      //Bring in the Consumer component and access its value attribute\n      <Consumer>\n        {value => {\n          //destructure dispatch out of the value attribute:\n          const { dispatch } = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {name}{' '}\n                <i\n                  onClick={() =>\n                    this.setState({\n                      showContactInfo: !this.state.showContactInfo\n                    })\n                  }\n                  className=\"fas fa-sort-down\"\n                  style={{ cursor: 'pointer' }}\n                />\n                <i\n                  className=\"fas fa-times\"\n                  style={{ cursor: 'pointer', float: 'right', color: 'red' }}\n                  //bind this to the Contact component so we can access id & dispatch from its props:\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                />\n                <Link to={`contacts/edit/${id}`}>\n                  <i\n                    className=\"fas fa-pencil-alt\"\n                    style={{\n                      cursor: 'pointer',\n                      float: 'right',\n                      color: 'black',\n                      marginRight: '1rem'\n                    }}\n                  />\n                </Link>\n              </h4>\n              {//if showContactInfo = true ? show-<ul> : show-null;\n              showContactInfo ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Email: {email}</li>\n                  <li className=\"list-group-item\">Phone: {phone}</li>\n                </ul>\n              ) : null}\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired\n};\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { contacts } = value;\n          console.log(contacts);\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                <span className=\"text-danger\">Contact</span> List\n              </h1>\n              {contacts.map(contact => (\n                <Contact key={contact.id} contact={contact} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n//destructure our expected input attributes as props:\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        //change attribute values to use our destructured values\n        type={type}\n        name={name}\n        className={classNames('form-control form-control-lg', {\n          'is-invalid': error\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {/* //error handling output element */}\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.propTypes = {\n  //NOTE PropTypes:\n  //defining required propTypes:\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  error: PropTypes.string,\n\n  //NOTE onChange is a function, so it is required as such:\n  onChange: PropTypes.func.isRequired\n};\n\nTextInputGroup.defaultProps = {\n  // not distinguishing between text, email, tel input type attribute.\n  type: 'text',\n  error: null\n};\n\nexport default TextInputGroup;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../../components/layout/TextInputGroup';\nimport uuid from 'uuid';\nimport axios from 'axios';\n\nclass AddContact extends Component {\n  //NOTE state\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  };\n\n  onSubmit = async (dispatch, e) => {\n    //NOTE onSubmit\n    //prevents any browser defaults from submitting\n    e.preventDefault();\n    //destructuring inputs from state\n    const { name, email, phone } = this.state;\n\n    // Check for errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is required' } });\n      return;\n    }\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is required' } });\n      return;\n    }\n    const newContact = {\n      //generating uuid with uuid package\n      id: uuid(),\n      //using es6 key/value shorthand:\n      name,\n      email,\n      phone\n    };\n\n    //making a post request to add a new contact, with the contact as the 2nd argument:\n    const res = await axios.post(\n      'https://jsonplaceholder.typicode.com/users/',\n      newContact\n    );\n\n    //dispatch gets returned with action.type: 'ADD_CONTACT' - payload: response.data\n    dispatch({ type: 'ADD_CONTACT', payload: res.data });\n\n    //Clear State upon form submit\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    });\n\n    //Redirect user upon form submit\n    this.props.history.push('/');\n  };\n\n  onChange = e =>\n    //NOTE onChange => setState\n    this.setState({\n      // targeting each input's name attribute, and then its value attribute\n      [e.target.name]: e.target.value\n    });\n\n  render() {\n    //NOTE render()\n    const { name, email, phone, errors } = this.state;\n\n    console.log(errors);\n\n    return (\n      //NOTE return\n      //value = state\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name..\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\" //overriding the default type of text we set.\n                    placeholder=\"you@email.com\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    type=\"tel\" //overriding the default type of text we set.\n                    placeholder=\"xxx-xxx-xxxx\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Add Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default AddContact;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass EditContact extends Component {\n  //NOTE state\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  };\n\n  async componentDidMount() {\n    //destructure id from props\n    const { id } = this.props.match.params;\n    //create a promise and a response:\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    //save the response\n    const contact = res.data;\n    //setState with response:\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    });\n  }\n\n  onSubmit = async (dispatch, e) => {\n    //NOTE onSubmit\n    //prevents any browser defaults from submitting\n    e.preventDefault();\n    //destructuring inputs from state\n    const { name, email, phone } = this.state;\n\n    // Check for errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is required' } });\n      return;\n    }\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is required' } });\n      return;\n    }\n\n    // creating an updated contact object from state:\n    const updContact = {\n      name,\n      email,\n      phone\n    };\n\n    //\n    const { id } = this.props.match.params;\n    // making PUT request and saving response, 2nd param: Updated Contact Object\n    const res = await axios.put(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      updContact\n    );\n\n    //dispatch action.type for update contact and payload data from response\n    dispatch({ type: 'UPDATE_CONTACT', payload: res.data });\n\n    //Clear State upon form submit\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    });\n\n    //Redirect user upon form submit\n    this.props.history.push('/');\n  };\n\n  onChange = e =>\n    //NOTE onChange => setState\n    this.setState({\n      // targeting each input's name attribute, and then its value attribute\n      [e.target.name]: e.target.value\n    });\n\n  render() {\n    //NOTE render()\n    const { name, email, phone, errors } = this.state;\n\n    console.log(errors);\n\n    return (\n      //NOTE return\n      //value = state\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name..\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\" //overriding the default type of text we set.\n                    placeholder=\"you@email.com\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    type=\"tel\" //overriding the default type of text we set.\n                    placeholder=\"xxx-xxx-xxxx\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default EditContact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Header = props => {\n  const { branding } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fas fa-home\" />\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contacts/add\" className=\"nav-link\">\n                <i className=\"fas fa-plus\" />\n                Add\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fas fa-question\" />\n                About\n              </Link>\n            </li>\n            {/* <li className=\"nav-item\">\n              <Link to=\"/test\" className=\"nav-link\">\n                <i className=\"fas fa-wrench\" />\n                Test\n              </Link>\n            </li> */}\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nHeader.defaultProps = {\n  branding: 'My App'\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React from 'react';\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple app to manage contacts</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h1 className=\"display-4\">\n        <span className=\"text-danger\">404</span> Page Not Found\n      </h1>\n      <p className=\"lead\">Sorry, that page does not exist.</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n//using hashrouter to deploy to github pages, known issues with browser router?\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\n// import Test from './components/test/Test';\nimport NotFound from './components/pages/NotFound';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n        {/* <Router basename=\"process.env.PUBLIC_URL\"> */}\n          <div className=\"App\">\n            <Header />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contacts/add\" component={AddContact} />\n                <Route\n                  exact\n                  path=\"/contacts/edit/:id\"\n                  component={EditContact}\n                />\n                <Route exact path=\"/about\" component={About} />\n                {/* <Route exact path=\"/test\" component={Test} /> */}\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\n/** NOTE\n ** 1. Provider is the outermost element, appended to root.\n ** 2. Router wraps our App component\n ** 3. Header is not wrapped in Switch, bc it appears on each page.\n ** 4. Switch is placed inside of a container which will then render each route.\n */\n\n/**  NOTE \n**  Adding Routes:\n**  1. Create Route inside Switch with 3 attributes:\n        a. exact - matches the path exactly.\n        b. path=\"/path\" - sets the path\n        c. component={componentName} - refers to the component to be rendered.\n*/\n\n/**  NOTE \n**  for deployment: we exchanged browserRouter for hashRouter, because of known issues:\n    https://github.com/facebook/create-react-app/issues/1765\n**  suggested fixes:\n**  Two solutions:\n\n**  1. Don’t use HTML5 history on GitHub pages. Use [`hashHistory`](https://github.com/   ReactTraining/react-router/blob/master/docs/guides/Histories.md#hashhistory) instead. Your URLs will look like `https://rockchalkwushock.github.io/rcws-development/#path/inside/the/app`.\n\n** 2. Use `process.env.PUBLIC_URL` in your route definitions so that they work both in development and after deployment. For example: `<Route path={process.env.PUBLIC_URL + '/'}>`. This will be empty in development and `rcws-development` (inferred from `homepage`) in production.\n*\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}